// Start: Code generated by ChatGPT

// database.js
const path = require("path");
const sqlite3 = require("sqlite3").verbose();

// Prefer native bcrypt; fall back to bcryptjs if native build is problematic on macOS
let bcrypt;
try {
  bcrypt = require("bcrypt");
} catch (e) {
  bcrypt = require("bcryptjs");
}

const SALT_ROUNDS = 12;
const ADMIN_USERNAME = "admin";
const ADMIN_PLAINTEXT = "wdf#2025";

const db = new sqlite3.Database(path.join(__dirname, "clinic.db"));

function run(db, sql, params = []) {
  return new Promise((resolve, reject) => {
    db.run(sql, params, function (err) {
      if (err) return reject(err);
      resolve(this);
    });
  });
}

function get(db, sql, params = []) {
  return new Promise((resolve, reject) => {
    db.get(sql, params, (err, row) => {
      if (err) return reject(err);
      resolve(row);
    });
  });
}

async function ensureUsersTable() {
  // Create the users table if not exists
  await run(
    db,
    `CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      username TEXT UNIQUE NOT NULL,
      passwordHash TEXT NOT NULL,
      is_admin INTEGER DEFAULT 0,          -- 0 = false, 1 = true
      createdAt TEXT DEFAULT (datetime('now'))
    )`
  );

  // Check if the table already had this column, add if missing
  const columns = await new Promise((resolve, reject) => {
    db.all("PRAGMA table_info(users)", (err, rows) => {
      if (err) reject(err);
      else resolve(rows);
    });
  });

  const hasIsAdmin = columns.some((col) => col.name === "is_admin");
  if (!hasIsAdmin) {
    await run(db, `ALTER TABLE users ADD COLUMN is_admin INTEGER DEFAULT 0`);
    console.log("Added missing column: is_admin (default false).");
  }

  const hasCreatedAt = columns.some((col) => col.name === "createdAt");
  if (!hasCreatedAt) {
    await run(db, `ALTER TABLE users ADD COLUMN createdAt TEXT`);
    await run(
      db,
      `UPDATE users SET createdAt = COALESCE(createdAt, datetime('now'))`
    );
    console.log("Added missing column: createdAt.");
  }
}

async function ensureAdminPassword() {
  const admin = await get(
    db,
    `SELECT id, username, passwordHash, is_admin FROM users WHERE username = ?`,
    [ADMIN_USERNAME]
  );

  const desiredHash = await bcrypt.hash(ADMIN_PLAINTEXT, SALT_ROUNDS);

  if (!admin) {
    await run(
      db,
      `INSERT INTO users (username, passwordHash, is_admin) VALUES (?, ?, 1)`,
      [ADMIN_USERNAME, desiredHash]
    );
    console.log("Seeded admin user with default password and is_admin=true.");
    return;
  }

  // Ensure the admin has the correct password and is_admin flag
  const ok = await bcrypt.compare(ADMIN_PLAINTEXT, admin.passwordHash);
  if (!ok) {
    await run(
      db,
      `UPDATE users SET passwordHash = ?, is_admin = 1 WHERE id = ?`,
      [desiredHash, admin.id]
    );
    console.log("Updated admin password and enforced is_admin=true.");
  } else if (!admin.is_admin) {
    await run(db, `UPDATE users SET is_admin = 1 WHERE id = ?`, [admin.id]);
    console.log("Updated admin user to is_admin=true.");
  } else {
    console.log("Admin password and privileges are already correct.");
  }
}

async function initDb() {
  await ensureUsersTable();
  await ensureAdminPassword();
  // Leave other tables as they are
}

module.exports = { db, initDb };

// End: Code generated by ChatGPT
