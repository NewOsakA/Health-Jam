// Start: Code generated by ChatGPT

// database.js
const path = require("path");
const sqlite3 = require("sqlite3").verbose();

// Prefer native bcrypt; fall back to bcryptjs if native build is problematic on macOS
let bcrypt;
try {
  bcrypt = require("bcrypt");
} catch (e) {
  bcrypt = require("bcryptjs");
}

const SALT_ROUNDS = 12;
const ADMIN_USERNAME = "admin";
const ADMIN_PLAINTEXT = "wdf#2025";

const db = new sqlite3.Database(path.join(__dirname, "clinic.db"));

function run(db, sql, params = []) {
  return new Promise((resolve, reject) => {
    db.run(sql, params, function (err) {
      if (err) return reject(err);
      resolve(this);
    });
  });
}

function get(db, sql, params = []) {
  return new Promise((resolve, reject) => {
    db.get(sql, params, (err, row) => {
      if (err) return reject(err);
      resolve(row);
    });
  });
}

async function ensureUsersTable() {
  await run(
    db,
    `CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      username TEXT UNIQUE NOT NULL,
      passwordHash TEXT NOT NULL,
      createdAt TEXT DEFAULT (datetime('now'))
    )`
  );
}

async function ensureAdminPassword() {
  const admin = await get(
    db,
    `SELECT id, username, passwordHash FROM users WHERE username = ?`,
    [ADMIN_USERNAME]
  );
  const desiredHash = await bcrypt.hash(ADMIN_PLAINTEXT, SALT_ROUNDS);

  if (!admin) {
    await run(db, `INSERT INTO users (username, passwordHash) VALUES (?, ?)`, [
      ADMIN_USERNAME,
      desiredHash,
    ]);
    console.log("Seeded admin user with default password.");
    return;
  }

  // If the stored hash does not match `wdf#2025`, overwrite it.
  const ok = await bcrypt.compare(ADMIN_PLAINTEXT, admin.passwordHash);
  if (!ok) {
    await run(db, `UPDATE users SET passwordHash = ? WHERE id = ?`, [
      desiredHash,
      admin.id,
    ]);
    console.log("Updated admin password to default (wdf#2025).");
  } else {
    console.log("Admin password already set correctly.");
  }
}

async function initDb() {
  await ensureUsersTable();
  await ensureAdminPassword();
  // NOTE: we leave your other tables as-is
}

module.exports = { db, initDb };

// End: Code generated by ChatGPT
